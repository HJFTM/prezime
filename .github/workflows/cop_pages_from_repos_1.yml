# napraviti konfiguraciju repositorija (uvod, bosna, stupnik...)
# uključiti foldere i podfoldere: gh-pages/_file, gh-pages/_npm, gh-pages/_observablehq, gh-pages/pages
# ? pretvoriti linkove?

name: Copy 2

on:
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # 1) Checkout default grane da možemo inicijalizirati gh-pages po potrebi
      - name: Checkout default branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Kreiraj gh-pages ako ne postoji
      - name: Ensure gh-pages exists
        shell: bash
        run: |
          if ! git ls-remote --exit-code --heads origin gh-pages >/dev/null 2>&1; then
            git switch --orphan gh-pages
            git rm -r -f --ignore-unmatch * .[^.]* || true
            echo "<!doctype html><title>prezime</title>" > index.html
            git -c user.name="GitHub Action" -c user.email="action@github.com" add -A
            git -c user.name="GitHub Action" -c user.email="action@github.com" commit -m "init gh-pages"
            git push origin gh-pages
          fi

      # 3) Checkout gh-pages kao radni dir
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      # 4) Očisti ciljane podmape i ukloni moguće gitlinkove iz indexa
      - name: Clean target subfolders and remove gitlinks
        shell: bash
        run: |
          # Ukloni gitlinkove (submodule zapise) ako postoje
          git ls-files -s | awk '$1=="160000"{print $4}' | while read p; do
            echo "Removing gitlink from index: $p"
            git rm -f --cached "$p" || true
            rm -rf "$p" || true
          done

          # Čisti i kreiraj odredišta
          for d in Uvod Bosna Stupnik Dubrovnik; do
            rm -rf "$d"
            mkdir -p "$d/pages"
          done
          rm -rf tmp
          mkdir -p tmp

      # 5) Kloniraj izvore (grane gh-pages)
      - name: Clone source repos
        shell: bash
        run: |
          SRC="https://github.com/HJFTM"
          git clone --depth=1 --branch gh-pages "$SRC/uvod.git"      tmp/uvod
          git clone --depth=1 --branch gh-pages "$SRC/bosna.git"     tmp/bosna
          git clone --depth=1 --branch gh-pages "$SRC/stupnik.git"   tmp/stupnik
          git clone --depth=1 --branch gh-pages "$SRC/dubrovnik.git" tmp/dubrovnik

      # 6) EKSTRAHIRAJ SAMO pages/ BEZ .git (git archive → tar -x)
      - name: Export pages/ into subfolders (no git metadata)
        shell: bash
        run: |
          export_pages () {
            local src="$1" dest="$2"
            if git -C "tmp/$src" cat-file -e gh-pages:pages 2>/dev/null; then
              # kreira tar s prefiksom "pages/" iz izvora, pa raspakira u destinaciju
              git -C "tmp/$src" archive --format=tar gh-pages pages \
                | tar -x -C "$dest"
            fi

            if git -C "tmp/$src" cat-file -e gh-pages:_observablehq 2>/dev/null; then
              # kreira tar s prefiksom "_observablehq/" iz izvora, pa raspakira u destinaciju
              git -C "tmp/$src" archive --format=tar gh-pages _observablehq \
                | tar -x -C "$dest"
            fi
            
            if git -C "tmp/$src" cat-file -e gh-pages:_file 2>/dev/null; then
              # kreira tar s prefiksom "_file/" iz izvora, pa raspakira u destinaciju
              git -C "tmp/$src" archive --format=tar gh-pages _file \
                | tar -x -C "$dest"
            fi
            if git -C "tmp/$src" cat-file -e gh-pages:_npm 2>/dev/null; then
              # kreira tar s prefiksom "_npm/" iz izvora, pa raspakira u destinaciju
              git -C "tmp/$src" archive --format=tar gh-pages _npm \
                | tar -x -C "$dest"
            fi            
            
          }

          export_pages uvod      Uvod
          export_pages bosna     Bosna
          export_pages stupnik   Stupnik
          export_pages dubrovnik Dubrovnik

          rm -rf tmp

      # (opcionalno) kratki pregled promjena
      - name: Debug diff
        shell: bash
        run: |
          echo "Changed files:"
          git status --porcelain | sed -n '1,200p' || true

      # 7) Commit & push
      - name: Commit & push
        shell: bash
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes."
          else
            git commit -m "Sync pages/ → Uvod|Bosna|Stupnik|Dubrovnik ($(date -u +%F_%T))"
            git push origin gh-pages
          fi
